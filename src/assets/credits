https://game-icons.net

Animosität: Delapouite - https://delapouite.com/
Berauscht: Lorc - http://lorcblog.blogspot.com/
Belastung: Delapouite - https://delapouite.com/
Betäubung: Lorc - http://lorcblog.blogspot.com/
Entrückt: Lorc - http://lorcblog.blogspot.com/
Furcht: Lorc - http://lorcblog.blogspot.com/
Paralyse: Lorc - http://lorcblog.blogspot.com/
Schmerz: Delapouite - https://delapouite.com/
Verwirrt: Lorc - http://lorcblog.blogspot.com/
Bewegungsunfähig: Delapouite - https://delapouite.com/
Bewusstlos: Skoll - 
Blind: Delapouite - https://delapouite.com/
Blutrausch: Lorc - http://lorcblog.blogspot.com/
Brennend: Lorc - http://lorcblog.blogspot.com/
Eingeengt: Delapouite - https://delapouite.com/
Fixiert: Delapouite - https://delapouite.com/
Handlungsunfähig: Delapouite - https://delapouite.com/
Krank: Lorc - http://lorcblog.blogspot.com/
Liegend: Delapouite - https://delapouite.com/
Pechmagnet: Delapouite - https://delapouite.com/
Raserei: Lorc - http://lorcblog.blogspot.com/
Stumm: Delapouite - https://delapouite.com/
Taub: Skoll -
Überrascht - Lorc - http://lorcblog.blogspot.com/
Übler Geruch: Lorc - http://lorcblog.blogspot.com/
Unsichtbar: Delapouite - https://delapouite.com/
Vergiftet: Lorc - http://lorcblog.blogspot.com/
Versteinert: Delapouite - https://delapouite.com/





SVG - Licence: https://fontawesome.com/license
Data was not changed

  /**
   * Sets the active fighter to the next in the list. Checks if a new round has to start
   */
  const nextFighter = () => {
    if (fighter.length - 1 === activeFighter) {
      endRound(); // start new round
      setActiveFighter(0);
    } else {
      setActiveFighter(activeFighter + 1);
    }
  };

  /**
   * Adds a new fighter to the fighters list
   * @param {Object} fighter the new fighter about to add to the fighter list
   */
  let addFighter = newFighter => {
    newFighter.id = fighter.length + 1; //TODO set the greatest id

    setFighter([...fighter, newFighter]);

    dispatch(closeModal()); // close the modal
    //console.log(fighter);
  };

  /**
   * Deletes a fighter with a given id
   * @param {number} fighterId id of the fighter about to delete
   */
  const killFighter = fighterId => {
    correctActiveFighter(fighterId); // check if the activeFighter has to be changed
    let newList = fighter.filter(function(fighter) {
      return fighter.id !== fighterId;
    }); // return an array of all remaining fighters

    // rearrange the id´s to let no holes
    newList = newList.map(newFighter => {
      if (fighterId <= newFighter.id) {
        newFighter.id = newFighter.id - 1;
      }
      return newFighter;
    });
    setFighter(newList);
  };

  /**
   * Corrects activeFighter when the fighterList is changed
   * @param {number} fighterId id of the fighter that is affected
   */
  const correctActiveFighter = fighterId => {
    console.log(`${fighterId} >= ${activeFighter}`);
    if (fighterId <= activeFighter) {
      setActiveFighter(activeFighter - 1);
    }
  };



















    /**
   * Compares two fighters by initiative and gives back corresponding values
   * @param {*} a first value
   * @param {*} b second value
   */
  const compare = (a, b) => {
    if (Number(a.initiative) > Number(b.initiative)) {
      return -1;
    }
    if (Number(a.initiative) < Number(b.initiative)) {
      return 1;
    }
    return 0;
  };

  /**
   * Sorts the fighter list and returns the list
   * @returns {array} List of sorted fighters
   */
  const sortFightersByInitiative = () => {
    return props.fighter.sort(compare);
  };

  /**
   * Creates a FighterCard-component for every fighter in the preveously sorted props.fighter array
   */
  let listFighters = () => {
    let sortedFighters = sortFightersByInitiative(); // sort fighters
